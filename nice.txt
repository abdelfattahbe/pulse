"use client"

import { useRef, useState, useEffect } from "react"
import { Canvas, useFrame } from "@react-three/fiber"
import { Text, PerspectiveCamera, Environment } from "@react-three/drei"
import { motion } from "framer-motion"
import type * as THREE from "three"

function LogoModel() {
  const groupRef = useRef<any>()
  const arcRefs = useRef<THREE.Mesh[]>([])
  const sphereRef = useRef<THREE.Mesh>(null)
  const [textVisible, setTextVisible] = useState(true)

  // Initialize animation - reduced delay from 2000ms to 500ms
  useEffect(() => {
    setTextVisible(true)
  }, [])

  // Gentle floating animation
  useFrame((state) => {
    if (groupRef.current) {
      groupRef.current.rotation.y = Math.sin(state.clock.getElapsedTime() * 0.15) * 0.2
      groupRef.current.rotation.x = Math.sin(state.clock.getElapsedTime() * 0.1) * 0.1
    }

    // Pulse animation for arcs
    arcRefs.current.forEach((arc, i) => {
      if (arc) {
        const material = arc.material as THREE.MeshStandardMaterial
        material.emissiveIntensity = 0.5 + Math.sin(state.clock.getElapsedTime() * 0.4 + i * 0.3) * 0.2
      }
    })

    // Pulse animation for sphere
    if (sphereRef.current) {
      const material = sphereRef.current.material as THREE.MeshStandardMaterial
      material.emissiveIntensity = 0.7 + Math.sin(state.clock.getElapsedTime() * 0.6) * 0.3

      // Subtle scale animation
      sphereRef.current.scale.setScalar(0.08 + Math.sin(state.clock.getElapsedTime() * 1) * 0.01)
    }
  })

  return (
    <group ref={groupRef} position={[0, 0, 0]}>
      {/* Curved arcs with enhanced materials */}
      {[1, 1.5, 2].map((radius, i) => (
        <mesh
          key={i}
          position={[0, 0, -1]}
          rotation={[0, 0, Math.PI * 0.75]}
          ref={(el) => {
            if (el) arcRefs.current[i] = el
          }}
        >
          <torusGeometry args={[radius, 0.03, 16, 100, Math.PI * 0.75]} />
          <meshStandardMaterial
            color="#D4AF37"
            metalness={0.8}
            roughness={0.2}
            emissive="#D4AF37"
            emissiveIntensity={0.5}
          />
        </mesh>
      ))}

      {/* Small sphere at the end of the arc with glow effect */}
      <mesh position={[1.4, 1.4, -1]} ref={sphereRef}>
        <sphereGeometry args={[0.08, 32, 32]} />
        <meshStandardMaterial
          color="#D4AF37"
          metalness={0.9}
          roughness={0.1}
          emissive="#D4AF37"
          emissiveIntensity={0.7}
        />
      </mesh>

      {/* Glow effect for the sphere */}
      <mesh position={[1.4, 1.4, -1.01]}>
        <sphereGeometry args={[0.12, 32, 32]} />
        <meshBasicMaterial color="#D4AF37" transparent opacity={0.2} />
      </mesh>

      {/* Animated text container */}
      {textVisible && (
        <>
          {/* Main title */}
          <motion.group position={[0, -0.2, 0]}>
            <mesh>
              <planeGeometry args={[4, 0.6]} />
              <meshBasicMaterial transparent opacity={0} />
            </mesh>
            <Text
              position={[0, 0, 0.01]}
              fontSize={0.4}
              color="#D4AF37"
              anchorX="center"
              anchorY="middle"
              font="/fonts/Inter-Bold.ttf"
            >
              Pulse OF knowledge
              <meshStandardMaterial
                color="#D4AF37"
                metalness={0.5}
                roughness={0.3}
                emissive="#D4AF37"
                emissiveIntensity={0.3}
              />
            </Text>
          </motion.group>

          {/* Subtitle */}
          <motion.group position={[0, -0.6, 0]}>
            <mesh>
              <planeGeometry args={[3, 0.4]} />
              <meshBasicMaterial transparent opacity={0} />
            </mesh>
            <Text
              position={[0, 0, 0.01]}
              fontSize={0.15}
              color="#D4AF37"
              anchorX="center"
              anchorY="middle"
              font="/fonts/Inter-Regular.ttf"
            >
              STUDY ABOARD
              <meshStandardMaterial
                color="#D4AF37"
                metalness={0.5}
                roughness={0.3}
                emissive="#D4AF37"
                emissiveIntensity={0.3}
              />
            </Text>
          </motion.group>
        </>
      )}
    </group>
  )
}

// Ripple effect component
function RippleEffect() {
  const meshRef = useRef<THREE.Mesh>(null)

  useFrame(({ clock }) => {
    if (meshRef.current) {
      const material = meshRef.current.material as THREE.MeshBasicMaterial
      if (material) {
        // Simple opacity pulsing instead of shader
        material.opacity = 0.1 + Math.sin(clock.getElapsedTime() * 0.5) * 0.05
      }
    }
  })

  return (
    <mesh ref={meshRef} rotation={[-Math.PI / 2, 0, 0]} position={[0, -1.5, 0]}>
      <planeGeometry args={[10, 10]} />
      <meshBasicMaterial color="#D4AF37" transparent={true} opacity={0.1} depthWrite={false} />
    </mesh>
  )
}

export default function Logo3D() {
  const [loaded, setLoaded] = useState(true)

  useEffect(() => {
    setLoaded(true)
  }, [])

  return (
    <div className="w-full h-[60vh] relative">
      <motion.div
        initial={{ opacity: 1 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.3 }}
        className="w-full h-full"
      >
        <Canvas>
          <PerspectiveCamera makeDefault position={[0, 0, 5]} />
          <ambientLight intensity={0.5} />
          <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} intensity={1} castShadow />
          <pointLight position={[-10, -10, -10]} intensity={0.5} />
          <Environment preset="studio" />
          <LogoModel />
          <RippleEffect />
        </Canvas>
      </motion.div>
    </div>
  )
}

